-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParJ where
import AbsJ
import LexJ
import ErrM

}

%name pPrg Prg
%name pListExp ListExp
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ';' { PT _ (TS _ 1) }
  'add' { PT _ (TS _ 2) }
  'bipush' { PT _ (TS _ 3) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Prg :: { Prg }
Prg : ListExp { AbsJ.Program (reverse $1) }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] } | ListExp Exp ';' { flip (:) $1 $2 }
Exp :: { Exp }
Exp : 'bipush' Integer { AbsJ.EBipush $2 } | 'add' { AbsJ.EAdd }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

